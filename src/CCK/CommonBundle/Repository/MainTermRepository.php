<?php

namespace CCK\CommonBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MainTermRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MainTermRepository extends EntityRepository
{
	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getYougoList($curriculum = null, $version = null, $hen = null, $sho = null, $dai = null, $chu = null, $ko = null, $nombre = null, $text_freq = null, $center_freq = null, $news_exam = null, $term = null, $sort_field = null, $sort_order = null, $term_id = null, $sub_term = null){
		$sql = "
			SELECT
				MainTerm.id,
				MainTerm.term_id,
				MainTerm.main_term,
				MainTerm.kana,
				MainTerm.text_frequency,
				MainTerm.center_frequency,
				MainTerm.news_exam,
				MainTerm.index_kana,
				SubTerm.sub_term,
				SubTerm.kana sub_kana,
				SubTerm.index_kana sub_index_kana,
				ExplainIndex.index_term,
				Refer_term.refer_term,
				MainTerm.index_original,
				MainTerm.index_original_kana,
				MainTerm.index_abbreviation,
				MainTerm.handover,
				User.name,
				MainTerm.create_date,
				MainTerm.modify_date,
				MainTerm.edit_date,
				Curriculum.id cur_id,
				Version.id ver_id
			FROM
				MainTerm
					LEFT JOIN
				SubTerm ON (MainTerm.term_id = SubTerm.main_term_id
					AND MainTerm.delete_flag = false
					AND SubTerm.delete_flag = false)
					LEFT JOIN
				ExplainIndex ON (MainTerm.term_id = ExplainIndex.main_term_id
					AND MainTerm.delete_flag = false
					AND ExplainIndex.delete_flag = false)
					LEFT JOIN
				(SELECT M.main_term refer_term,
						R.id,
						R.main_term_id,
						R.delete_flag
				FROM MainTerm M
					INNER JOIN
					Refer R ON (M.term_id = R.refer_term_id
					AND M.delete_flag = false
					AND R.delete_flag = false)) Refer_term ON (MainTerm.term_id = Refer_term.main_term_id
						AND MainTerm.delete_flag = false
						AND Refer_term.delete_flag = false
					)
					INNER JOIN
				User ON (MainTerm.user_id = User.user_id
					AND MainTerm.delete_flag = false
					AND User.delete_flag = false)
					INNER JOIN
				Version ON (MainTerm.curriculum_id = Version.id
					AND MainTerm.delete_flag = false
					AND Version.delete_flag = false)
					INNER JOIN
				Curriculum ON (Version.curriculum_id = Curriculum.id
					AND Version.delete_flag = false
					AND Curriculum.delete_flag = false)
					INNER JOIN
				Header ON (MainTerm.header_id = Header.id
					AND MainTerm.delete_flag = false
					AND Header.delete_flag = false)
			WHERE
				MainTerm.delete_flag = false
		";

		if($curriculum){
			$sql .= " AND Curriculum.id = '" . str_replace("'", "''", $curriculum) . "'";
		}

		if($version){
			$sql .= " AND Version.id = '" . str_replace("'", "''", $version) . "'";
		}

		if($hen){
			$sql .= " AND Header.hen = '" . str_replace("'", "''", $hen) . "'";
		}

		if($sho){
			$sql .= " AND Header.sho = '" . str_replace("'", "''", $sho) . "'";
		}

		if($dai){
			$sql .= " AND Header.dai = '" . str_replace("'", "''", $dai) . "'";
		}

		if($chu){
			$sql .= " AND Header.chu = '" . str_replace("'", "''", $chu) . "'";
		}

		if($ko){
			$sql .= " AND Header.ko = '" . str_replace("'", "''", $ko) . "'";
		}

		if($nombre){
			$sql .= " AND MainTerm.nombre collate utf8_unicode_ci = '" . str_replace("'", "''", $nombre) . "'";
		}

		if($text_freq){
			if($text_freq == '1'){
				// A
				$sql .= " AND IF(Curriculum.id = 1, MainTerm.text_frequency >= 8, MainTerm.text_frequency >= 6)";
			}elseif($text_freq == '2'){
				// B
				$sql .= " AND IF(Curriculum.id = 1, (MainTerm.text_frequency >= 4 AND MainTerm.text_frequency <= 7), (MainTerm.text_frequency >= 3 AND MainTerm.text_frequency <= 5))";
			}else{
				// C
				$sql .= " AND IF(Curriculum.id = 1, MainTerm.text_frequency <= 3, MainTerm.text_frequency <= 2)";
			}
		}

		if($center_freq){
			$sql .= " AND MainTerm.center_frequency collate utf8_unicode_ci = '" . str_replace("'", "''", $center_freq) . "'";
		}

		if($news_exam){
			$sql .= " AND MainTerm.news_exam = true";
		}

		if($term){
			$sql .= " AND REPLACE_TAGS(MainTerm.main_term) collate utf8_unicode_ci LIKE '%" . str_replace("'", "''", $term) . "%'";
		}

		if($sub_term){
			//$sql .= " AND REPLACE_TAGS(SubTerm.sub_term) collate utf8_unicode_ci LIKE '%" . str_replace("'", "''", $sub_term) . "%'";
			$sql .= " AND REPLACE_TAGS(SubTerm.sub_term) = any (select `sub_term` from `SubTerm` where `main_term_id` = any (select `term_id` from `MainTerm` where `term_id` = any (select `main_term_id` from `SubTerm` where `sub_term` collate utf8_unicode_ci LIKE '%" . str_replace("'", "''", $sub_term) . "%')))";
		}

		if($term_id){
			$sql .= " AND MainTerm.id = " . $term_id;
		}

		if($sort_field){
			$sql .= " ORDER BY ";
			if(strpos($sort_field, 'SubTerm') !== false){
				$sql .= "SubTerm.id " . $sort_order . ",";
			}
			if(strpos($sort_field, 'Refer_term') !== false){
				$sql .= "Refer_term.id " . $sort_order . ",";
			}
			$sql .= $sort_field . " " . $sort_order . " ";
		}else{
			$sql .= " ORDER BY Header.hen,Header.sho,Header.dai,Header.chu,Header.ko,MainTerm.print_order,MainTerm.id ";
		}

		$result = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		if(count($result) == 0){
			return $result;
		}

		$key_term_id = '';
		$wk_sub_term = array();
		$wk_sub_kana = array();
		$wk_sub_index_kana = array();
		$wk_refer_term = array();
		$wk_explain_term = array();

		$wk_result = array();
		$wk_result_record = array('id' => '','term_id' => '','main_term' => '','kana' => '','index_kana' => '','sub_term' => '','sub_kana' => '','index_term' => '','sub_index_kana' => '','refer_term' => '','index_original' => '','index_original_kana' => '','index_abbreviation' => '','handover' => '','name' => '','modify_date' => '');
		foreach($result as $result_record){
			if(($key_term_id != '')&&($result_record['term_id'] != $key_term_id)){
				// (*1)でまとめたサブ用語・指矢印用語を主用語単位にレコード生成する
				$wk_result = $this->setRecordPerMainTerm($wk_result_record, $wk_sub_term, $wk_sub_kana, $wk_sub_index_kana, $wk_refer_term, $wk_explain_term, $wk_result);

				$wk_sub_term = array();
				$wk_sub_kana = array();
				$wk_sub_index_kana = array();
				$wk_refer_term = array();
				$wk_explain_term = array();
			}

			// サブ用語・指矢印用語を主用語単位にまとめる(*1)
			$this->stackSubTerm($result_record, $wk_sub_term, $wk_sub_kana, $wk_sub_index_kana, $wk_refer_term, $wk_explain_term);

			$wk_result_record = $result_record;
			$key_term_id = $result_record['term_id'];
		}

		// サブ用語・指矢印用語を主用語単位にまとめる(*1)
		//$this->stackSubTerm($result_record, $wk_sub_term, $wk_sub_kana, $wk_sub_index_kana, $wk_refer_term, $wk_delimiter);

		// (*1)でまとめたサブ用語・指矢印用語を主用語単位にレコード生成する
		$wk_result = $this->setRecordPerMainTerm($wk_result_record, $wk_sub_term, $wk_sub_kana, $wk_sub_index_kana, $wk_refer_term, $wk_explain_term, $wk_result);

		// サブ用語・指矢印用語でソートの場合、主用語単位にまとめた後、再度ソート
		if((strpos($sort_field, 'SubTerm') !== false)||(strpos($sort_field, 'Refer_term') !== false)){
			$field_name = explode(".", $sort_field);

			if($field_name[1] == 'kana'){
				$field_name[1] = 'sub_kana';
			}elseif($field_name[1] == 'index_kana'){
				$field_name[1] = 'sub_index_kana';
			}
			usort($wk_result, $this->build_sorter($field_name[1],$sort_order));
		}

		return $wk_result;
	}

	function stackSubTerm(&$result_record, &$wk_sub_term, &$wk_sub_kana, &$wk_sub_index_kana, &$wk_refer_term, &$wk_explain_term){
		// サブ用語・指矢印用語を主用語単位にまとめる(*1)
		if((array_search($result_record['sub_term'], $wk_sub_term) === false)&&(!is_null($result_record['sub_term']))&&($result_record['sub_term'] != '')) {array_push($wk_sub_term,$result_record['sub_term']);}
		if((array_search($result_record['sub_kana'], $wk_sub_kana) === false)&&(!is_null($result_record['sub_kana']))&&($result_record['sub_kana'] != '')) {array_push($wk_sub_kana,$result_record['sub_kana']);}
		if((array_search($result_record['sub_index_kana'], $wk_sub_index_kana) === false)&&(!is_null($result_record['sub_index_kana']))&&($result_record['sub_index_kana'] != '')) {array_push($wk_sub_index_kana,$result_record['sub_index_kana']);}
		if((array_search($result_record['refer_term'], $wk_refer_term) === false)&&(!is_null($result_record['refer_term']))&&($result_record['refer_term'] != '')) {array_push($wk_refer_term,$result_record['refer_term']);}
		if((array_search($result_record['index_term'], $wk_explain_term) === false)&&(!is_null($result_record['index_term']))&&($result_record['index_term'] != '')) {array_push($wk_explain_term,$result_record['index_term']);}
	}

	function setRecordPerMainTerm($wk_result_record, $wk_sub_term, $wk_sub_kana, $wk_sub_index_kana, $wk_refer_term, $wk_explain_term, $wk_result){
		// (*1)でまとめたサブ用語・指矢印用語を主用語単位にレコード生成する
		$wk_result_record['sub_term'] = implode('、' , $wk_sub_term);
		$wk_result_record['sub_kana'] = implode('、' , $wk_sub_kana);
		$wk_result_record['sub_index_kana'] = implode('、' , $wk_sub_index_kana);
		$wk_result_record['refer_term'] = implode('、' , $wk_refer_term);
		$wk_result_record['index_term'] = implode('、' , $wk_explain_term);

		array_push($wk_result,$wk_result_record);

		return $wk_result;
	}

	function build_sorter($key,$order) {
		return function ($a, $b) use ($key,$order) {
			$token = 1;
			if($order == ' DESC'){
				$token = -1;
			}

			return strnatcmp($a[$key], $b[$key]) * $token;
		};
	}


	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getYougoDetail($term_id){
		$sql = "
			SELECT
				MainTerm.id,
				MainTerm.term_id,
				MainTerm.curriculum_id,
				MainTerm.main_term,
				MainTerm.red_letter,
				MainTerm.text_frequency,
				MainTerm.center_frequency,
				MainTerm.news_exam,
				MainTerm.kana,
				MainTerm.index_kana,
				MainTerm.index_original,
				MainTerm.index_original_kana,
				MainTerm.index_abbreviation,
				MainTerm.handover,
				MainTerm.modify_date,
				MainTerm.delimiter,
				MainTerm.term_explain
			FROM
				MainTerm
			WHERE
				MainTerm.delete_flag = false
		";

		if($term_id){
			$sql .= " AND MainTerm.term_id = " . $term_id;
		}

		$sql .= " ORDER BY MainTerm.term_id";

		$result = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result[0];
	}

	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getMainTermList($cur_id,$term_id,$hen,$sho,$type){
		$sql = "
			SELECT
				Curriculum.id cur_id,
				Curriculum.name cur_name,
				Version.id ver_id,
				Version.name var_name,
				MainTerm.id,
				MainTerm.term_id,
				MainTerm.header_id,
				MainTerm.print_order,
				MainTerm.main_term,
				MainTerm.red_letter,
				MainTerm.text_frequency,";
		if($type != '3'){
			$sql .= "MainTerm.center_frequency,";
		}else{
			$sql .= "tbl_center.center_frequency,";
		}
		$sql .= "MainTerm.news_exam,
				MainTerm.kana,
				MainTerm.kana_exist_flag,
				MainTerm.index_kana,
				MainTerm.index_add_letter,
				MainTerm.index_original,
				MainTerm.index_original_kana,
				MainTerm.index_abbreviation,
				MainTerm.handover,
				MainTerm.modify_date,
				MainTerm.delimiter,
				MainTerm.western_language,
				MainTerm.birth_year,
				MainTerm.nombre,
				MainTerm.nombre_bold,
				MainTerm.illust_filename,
				MainTerm.illust_caption,
				MainTerm.illust_kana,
				MainTerm.illust_nombre,
				MainTerm.handover,
				MainTerm.term_explain
			FROM
				MainTerm
					INNER JOIN
				Version ON (MainTerm.curriculum_id = Version.id
					AND MainTerm.delete_flag = false
					AND Version.delete_flag = false)
					INNER JOIN
				Curriculum ON (Version.curriculum_id = Curriculum.id
					AND Curriculum.delete_flag = false
					AND Version.delete_flag = false)
					INNER JOIN
				Header ON (MainTerm.header_id = Header.id
					AND MainTerm.delete_flag = false
					AND Header.delete_flag = false)";

		if($type == '3'){
			$sql .= "INNER JOIN
				(SELECT Center.main_term_id,
						Center.year,
						Center.main_exam,
						Center.sub_exam,
						Center.delete_flag,
						(Center.main_exam + Center.sub_exam) center_frequency
				FROM
					Center
						INNER JOIN
					(SELECT MAX(Center.year) year,
							Center.main_term_id
					FROM
						Center
					WHERE Center.yougo_flag = 1
						AND Center.delete_flag = false
					GROUP BY Center.main_term_id) tbl_tmp ON (Center.main_term_id = tbl_tmp.main_term_id
															AND Center.year = tbl_tmp.year)
				WHERE Center.yougo_flag = 1
					AND Center.delete_flag = false) tbl_center ON (MainTerm.term_id = tbl_center.main_term_id
																			AND MainTerm.delete_flag = false
																			AND tbl_center.delete_flag = false)";
		}

		$sql .= " WHERE
				MainTerm.delete_flag = false
		";

		if($cur_id){
			$sql .= " AND MainTerm.curriculum_id = " . $cur_id;
		}
		if($term_id){
			$sql .= " AND MainTerm.term_id = " . $term_id;
		}
		if($hen){
			$sql .= " AND Header.hen = '" . str_replace("'", "''", $hen) . "'";
		}
		if($sho){
			$sql .= " AND Header.hen = '" . str_replace("'", "''", $hen) . "'";
			$sql .= " AND Header.sho = '" . str_replace("'", "''", $sho) . "'";
		}

		if(($type == '1')||($type == '3')){
			// 索引
			$sql .= " ORDER BY MainTerm.index_kana,MainTerm.term_id";
		}else{
			// 本文
			$sql .= " ORDER BY Header.hen,Header.sho,Header.dai,Header.chu,Header.ko,MainTerm.print_order,MainTerm.term_id";
		}


		$result = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result;
	}

	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getYougoDetailOfSubterm($term_id,$is_getId=false,$is_index='0'){
		$sql = "
			SELECT
				SubTerm.id,
				SubTerm.main_term_id,
				SubTerm.sub_term,
				SubTerm.red_letter,
				SubTerm.text_frequency,";

		if($is_index != '3'){
			$sql .= "SubTerm.center_frequency,";
		}else{
			$sql .= "tbl_center.center_frequency,";
		}

		$sql .= "SubTerm.news_exam,
				SubTerm.kana,
				SubTerm.kana_exist_flag,
				SubTerm.index_kana,
				SubTerm.index_add_letter,
				SubTerm.delimiter,
				SubTerm.delimiter_kana,
				SubTerm.nombre
			FROM
				SubTerm";

		if($is_index == '3'){
			$sql .= " INNER JOIN
				(SELECT Center.sub_term_id,
						Center.year,
						Center.main_exam,
						Center.sub_exam,
						Center.delete_flag,
						(Center.main_exam + Center.sub_exam) center_frequency
				FROM
					Center
						INNER JOIN
					(SELECT MAX(Center.year) year,
							Center.sub_term_id
					FROM
						Center
					WHERE Center.yougo_flag = 2
						AND Center.delete_flag = false
					GROUP BY Center.sub_term_id) tbl_tmp ON (Center.sub_term_id = tbl_tmp.sub_term_id
															AND Center.year = tbl_tmp.year)
				WHERE Center.yougo_flag = 2
					AND Center.delete_flag = false) tbl_center ON (SubTerm.id = tbl_center.sub_term_id
																			AND SubTerm.delete_flag = false
																			AND tbl_center.delete_flag = false)";
		}

		$sql .= " WHERE
				SubTerm.delete_flag = false
		";

		if($is_getId){
			$sql .= " AND SubTerm.id = " . $term_id;
		}else{
			if($term_id){
				$sql .= " AND SubTerm.main_term_id = " . $term_id;
			}
		}

		if($is_index == '0'){
			$sql .= " ORDER BY SubTerm.id";
		}else{
			// 索引
			$sql .= " ORDER BY SubTerm.index_kana,SubTerm.id";
		}

		$result_sub = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result_sub;
	}

	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getYougoDetailOfSynonym($term_id,$is_getId=false,$is_index='0'){
		$sql = "
			SELECT
				Synonym.id,
				Synonym.term,
				Synonym.synonym_id,
				Synonym.red_letter,
				Synonym.text_frequency,";

		if($is_index != '3'){
			$sql .= "Synonym.center_frequency,";
		}else{
			$sql .= "tbl_center.center_frequency,";
		}

		$sql .= "Synonym.news_exam,
				Synonym.delimiter,
				Synonym.index_add_letter,
				Synonym.index_kana,
				Synonym.nombre
			FROM
				Synonym";

		if($is_index == '3'){
			$sql .= " INNER JOIN
				(SELECT Center.sub_term_id,
						Center.year,
						Center.main_exam,
						Center.sub_exam,
						Center.delete_flag,
						(Center.main_exam + Center.sub_exam) center_frequency
				FROM
					Center
						INNER JOIN
					(SELECT MAX(Center.year) year,
							Center.sub_term_id
					FROM
						Center
					WHERE Center.yougo_flag = 3
						AND Center.delete_flag = false
					GROUP BY Center.sub_term_id) tbl_tmp ON (Center.sub_term_id = tbl_tmp.sub_term_id
															AND Center.year = tbl_tmp.year)
				WHERE Center.yougo_flag = 3
					AND Center.delete_flag = false) tbl_center ON (Synonym.id = tbl_center.sub_term_id
																			AND Synonym.delete_flag = false
																			AND tbl_center.delete_flag = false)";
		}

		$sql .= " WHERE
				Synonym.delete_flag = false
		";

		if($is_getId){
			$sql .= " AND Synonym.id = " . $term_id;
		}else{
			if($term_id){
				$sql .= " AND Synonym.main_term_id = " . $term_id;
			}
		}

		if($is_index == '0'){
			$sql .= " ORDER BY Synonym.id";
		}else{
			// 索引
			$sql .= " ORDER BY Synonym.index_kana,Synonym.id";
		}

		$result_syn = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result_syn;
	}

	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getYougoDetailOfRefer($term_id){
		$sql = "
			SELECT
				Refer.id,
				MainTerm.main_term,
				MainTerm.header_id,
				MainTerm.curriculum_id ver_id,
				Header.hen,
				Header.sho,
				Header.dai,
				Header.chu,
				Header.ko,
				Refer.refer_term_id,
				Refer.nombre
			FROM
				MainTerm
					INNER JOIN
				Refer ON (MainTerm.term_id = Refer.refer_term_id
					AND MainTerm.delete_flag = false
					AND Refer.delete_flag = false)
					INNER JOIN
				Header ON (MainTerm.header_id = Header.id
					AND MainTerm.delete_flag = false
					AND Header.delete_flag = false)
			WHERE
				MainTerm.delete_flag = false
				AND Refer.delete_flag = false
				AND Header.delete_flag = false
		";

		if($term_id){
			$sql .= " AND Refer.main_term_id = " . $term_id;
		}

		$sql .= " ORDER BY Refer.id";

		$result_ref = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result_ref;
	}

	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getNewTermID(){
		$sql = "
			SELECT * FROM MainTerm WHERE MainTerm.term_id = (SELECT MAX(MainTerm.term_id) FROM MainTerm)
		";
		$result = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result;
	}

	/**
	 * @return Ambigous <multitype:, \Doctrine\ORM\mixed, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
	 */
	public function getPrintOrderList($curriculumId = null, $headerId = null){
		$sql = "
			SELECT
				*
			FROM
				MainTerm
			WHERE";
		if($curriculumId){
			$sql .= " MainTerm.curriculum_id = " . $curriculumId . " AND ";
		}
		if($headerId){
			$sql .= " MainTerm.header_id = " . $headerId . " AND ";
		}
		$sql .= " MainTerm.delete_flag = false
			ORDER BY
				MainTerm.print_order
		";
		$result = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result;
	}

	public function getYougoListByHeader($curriculum_id, $header_id){
		$sql = "
			SELECT
				MainTerm.term_id id,
				MainTerm.main_term name
			FROM
				MainTerm
			WHERE
				MainTerm.curriculum_id = ".$curriculum_id."
				AND MainTerm.header_id IN (".$header_id.")
				AND MainTerm.delete_flag = false
			ORDER BY
				MainTerm.header_id, MainTerm.print_order
		";
		$result = $this->getEntityManager()->getConnection()->executeQuery($sql)->fetchAll();

		return $result;
	}
}